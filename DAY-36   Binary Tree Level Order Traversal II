//TIME COMPLEXITY:-O(N)
//AUX.  SPACE COMPLEXITY:-O(N)
107. Binary Tree Level Order Traversal II
Medium
3.9K
304
Companies
Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

 //SAMPLE
 Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        queue<TreeNode*>q;
        vector<vector<int>>ans;
        if(root==NULL){
            return ans;
        }
        q.push(root);
       while(!q.empty()){
           vector<int>v;
           int n=q.size();
           while(n--){
               TreeNode* root=q.front();
               q.pop();
               v.push_back(root->val);
               if(root->left){
                   q.push(root->left);
               }
               if(root->right){
                   q.push(root->right);
               }
              
               
           }
            // reverse(v.begin(),v.end());
           ans.push_back(v);

       }
       reverse(ans.begin(),ans.end());
       return ans;
    }
};
